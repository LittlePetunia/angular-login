
basic auth working.

Next:

  [] create dist build process in gulp
    [] don't worry about minimizing for now

  [] deploy on heroku
    [] need a host for mongo db
    [] need 'production' node configuration for specifying where to serve files
       and where the database is located.


  [] update node server so it serves correct static files based on environment: dev, test, build.
  [] create gulp tasks to run tests on test/build environments.
  [] can I just always build to dist in realtime and use for testing dev and pro?

  [] use less for css generation
    [] create gulp task to regenerate css on less file changes.
       This needs to happen when you are testing also so add this dependency to test tasks.

  [x] unprotect registration page.

  [x] make sure tests work.

  [x] store token in cookie? so user can still be logged in after leaving page.

  [] refactor

    [] create notification directive that can be triggered from any other controller or service
       look at paul's toast project

        - [x] create directive to render notification elements inside a div(directive element)
        - [x] create a service to hold notifications that directive talks to
        - [x] refactor login page to use global service and comment out use of local notification.
        - [x] add way to clear notifications when state changes.

        [x] add ability to set notification for next state
          [x] need notification list in service for next state
          [x] need a way to know when state change happens so we can change lists

        - [x] add timeout feature
            [x] working for click event but not when triggered from directive at creation time.

        - [x] consolidate service code into a notification interface factory  that
             you can call getInstance() on.

        - [] add html feature
        - [] add header feature
        - [] add icon?

    [x] create some globaly accessible security service to manage token/session.

    [] create directive for login/logout/currentUser menu items


  [] create roles admin/user
  [] assign rights to roles {editSelf,editAll,readSelf,readAll}
     Read up more on typical role/permission models for web apps.
     
  [] main controller needs to watch AuthSvc.isLoggedIn so if a user logs out on one tab the change is noticed on second tab.



//create AuthService like so:
http://stackoverflow.com/questions/14206492/how-do-i-store-a-current-user-context-in-angular/14206567#comment20831205_14206567

app.factory( 'AuthService', function() {
  var currentUser;

  return {
    login: function() { ... },
    logout: function() { ... },
    isLoggedIn: function() { ... },
    currentUser: function() { return currentUser; }
    ...
  };
});


then controllers can use the service:
app.controller( 'MainCtrl', function( $scope, AuthService ) {
  $scope.$watch( AuthService.isLoggedIn, function ( isLoggedIn ) {
    $scope.isLoggedIn = isLoggedIn;
    $scope.currentUser = AuthService.currentUser();
  });
});


// what to store in token:
// issuer, expiration, scopes (what person can access, or maybe this could be roles), subject (user identifier)
 "iss": "http://galaxies.com",
  "exp": 1300819380,
  "scopes": ["explorer", "solar-harvester", "seller"],
  "sub": "tom@andromeda.com"
