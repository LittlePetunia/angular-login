
basic auth working.

Next:


  [x]unprotect registration page.

  [x] make sure tests work.

  [x] store token in cookie? so user can still be logged in after leaving page.

  [] refactor

    [] create notification directive that can be triggered from any other controller or service
       look at paul's toast project

        - [x]create directive to render notification elements inside a div(directive element)
        - [x]create a service to hold notifications that directive talks to
        - [x]refactor login page to use global service and comment out use of local notification.
        - [x] add way to clear notifications when state changes.

        [x] add ability to set notification for next state
          [x] need notification list in service for next state
          [x] need a way to know when state change happens so we can change lists

        - [x] add timeout feature
            [x] working for click event but not when triggered from directive at creation time.

        - [] consolidate service code into a notification interface factory  that
             you can call getInstance() on.

        - add html feature
        - add header feature
        - add icon?

    [] create some globaly accessible security service to manage token/session.

    [] create directive for login/logout/currentUser menu items


  [] create roles admin/user
  [] assign rights to roles {editSelf,editAll,readSelf,readAll}
  []


problem with notification directive is that i cannot clear the items on demand.
They are not associated with a model object by design so that I can fade them out.
options:
- give notification elements an id so I can manipulate them from directive
- associate element with a scope item (does this have to be a real scope?) and then
  to delete will delete the model item after a timeout


//create AuthService like so:
http://stackoverflow.com/questions/14206492/how-do-i-store-a-current-user-context-in-angular/14206567#comment20831205_14206567

app.factory( 'AuthService', function() {
  var currentUser;

  return {
    login: function() { ... },
    logout: function() { ... },
    isLoggedIn: function() { ... },
    currentUser: function() { return currentUser; }
    ...
  };
});


then controllers can use the service:
app.controller( 'MainCtrl', function( $scope, AuthService ) {
  $scope.$watch( AuthService.isLoggedIn, function ( isLoggedIn ) {
    $scope.isLoggedIn = isLoggedIn;
    $scope.currentUser = AuthService.currentUser();
  });
});


// what to store in token:
// issuer, expiration, scopes (what person can access, or maybe this could be roles), subject (user identifier)
 "iss": "http://galaxies.com",
  "exp": 1300819380,
  "scopes": ["explorer", "solar-harvester", "seller"],
  "sub": "tom@andromeda.com"
