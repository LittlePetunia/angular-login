
basic auth working.

Next:


  [x]unprotect registration page.

  [x] make sure tests work.

  [x] store token in cookie? so user can still be logged in after leaving page.

  [] refactor

    [] create notification directive that can be triggered from any other controller or service
       look at paul's toast project

    [] create some globaly accessible security service to manage token/session.

    [] create directive for login/logout/currentUser menu items


  [] create roles admin/user
  [] assign rights to roles {editSelf,editAll,readSelf,readAll}
  []




//create AuthService like so:
http://stackoverflow.com/questions/14206492/how-do-i-store-a-current-user-context-in-angular/14206567#comment20831205_14206567

app.factory( 'AuthService', function() {
  var currentUser;

  return {
    login: function() { ... },
    logout: function() { ... },
    isLoggedIn: function() { ... },
    currentUser: function() { return currentUser; }
    ...
  };
});


then controllers can use the service:
app.controller( 'MainCtrl', function( $scope, AuthService ) {
  $scope.$watch( AuthService.isLoggedIn, function ( isLoggedIn ) {
    $scope.isLoggedIn = isLoggedIn;
    $scope.currentUser = AuthService.currentUser();
  });
});


// what to store in token:
// issuer, expiration, scopes (what person can access, or maybe this could be roles), subject (user identifier)
 "iss": "http://galaxies.com",
  "exp": 1300819380,
  "scopes": ["explorer", "solar-harvester", "seller"],
  "sub": "tom@andromeda.com"
